#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Created on Tue Apr  5 08:25:26 2022
a script for the extraction of genbankfiles from csvs generated by the antismash database
input: antismash CSV (seperator=",")
output: genbank files
@author: friederike
"""
import Bio
import re
import pandas as pd
from Bio import SeqIO
from Bio.Seq import Seq
from Bio import Entrez
from Bio.SeqFeature import SeqFeature, FeatureLocation
from Bio.SeqRecord import SeqRecord

#import antiSMASH DB CSV
filename_csv="/home/friederike/Documents/Coding/TailEnzA_main/TailEnzA/Classifiers/Training_data/Dataset/antismash_db_all_terpenes_remaining.csv"
output_folder="/home/friederike/Documents/Coding/TailEnzA_main/TailEnzA/Classifiers/Training_data/Dataset/Terpenes_genbank_files_antismash_DB/"
input_data=pd.read_csv(filename_csv, delimiter=",")
#input_data=pd.read_csv(filename_csv, delimiter="\t")
Entrez.email = "friederike@biermann-erfurt.de"
allow_hybrids=True
output_fasta=output_folder+"terpenes.fasta"
output_fasta_handle = open(output_fasta, "w")
def fetch_DNA(NCBI_accession):
    print(NCBI_accession)
    dnahandle = Entrez.efetch(db="nucleotide", id=NCBI_accession, rettype='gbwithparts',retmode="xml")
    genomes = Entrez.parse(dnahandle)
    for genome in genomes:
        dnahandle.close()
        return genome

def format_feature(feature):
    final_feature=feature["GBFeature_intervals"][0]
    for feature_qualifier in feature['GBFeature_quals']:
        try:
            final_feature[feature_qualifier['GBQualifier_name']]=feature_qualifier['GBQualifier_value']
        except : print(feature_qualifier)
    return final_feature
def convert_to_fasta(genbank_record):

    for seq_feature in genbank_record.features :

        if seq_feature.type=="CDS" :
            try:
                output_fasta_handle.write(">%s from %s (%s)\n%s\n" % (
                       seq_feature.qualifiers['protein_id'],
                       genbank_record .name,
                       seq_feature.qualifiers['product'],
                       seq_feature.qualifiers['translation']))
            except:(print (seq_feature))

def obtain_partial_Genbank(NCBI_accession,genome, begin_cluster, end_cluster):
    index_protein_begin=1000000000
    definition=genome["GBSeq_definition"]
    species = genome["GBSeq_organism"]
    xml_features=[]
    complete_sequence=genome['GBSeq_sequence']
    begin_cluster=int(begin_cluster)
    end_cluster=int(end_cluster)
    chosensequence=complete_sequence[begin_cluster:end_cluster].upper()

    for index in range(0, len(genome['GBSeq_feature-table'])+1):

        if genome['GBSeq_feature-table'][index]["GBFeature_key"]!="source":
            if( int(genome['GBSeq_feature-table'][index]['GBFeature_intervals'][0]['GBInterval_from'])>=begin_cluster or int(genome['GBSeq_feature-table'][index]['GBFeature_intervals'][0]['GBInterval_to'])>=begin_cluster) and  index_protein_begin==1000000000:

                index_protein_begin=index
            if index>= index_protein_begin+2:
                xml_features+=[genome['GBSeq_feature-table'][index]]
            if int(genome['GBSeq_feature-table'][index]['GBFeature_intervals'][0]['GBInterval_from'])>=end_cluster and int(genome['GBSeq_feature-table'][index]['GBFeature_intervals'][0]['GBInterval_to'])>=end_cluster:
              index_protein_end=index-2
              break

    #create genbank file
    genbank_seq_record=SeqRecord(Seq(chosensequence),id=NCBI_accession,annotations={"molecule_type":"dna"}, name=NCBI_accession+"-"+str(begin_cluster)+"-"+str(end_cluster))
    seq_feature= SeqFeature(FeatureLocation(0,end_cluster-begin_cluster),type="source", qualifiers=genome['GBSeq_feature-table'][0])
    genbank_seq_record.features+=[seq_feature]
    #create features for genbank file
    for feature in xml_features:
        formatted_feature=format_feature(feature)
        if int(feature['GBFeature_intervals'][0]['GBInterval_from'])<int(feature['GBFeature_intervals'][0]['GBInterval_to']):
            feature['GBFeature_location']="complement("+str(int(feature['GBFeature_intervals'][0]['GBInterval_from'])-begin_cluster)+".."+str(int(feature['GBFeature_intervals'][0]['GBInterval_to'])-begin_cluster)+")"
            seq_feature= SeqFeature(FeatureLocation(int(feature['GBFeature_intervals'][0]['GBInterval_from'])-begin_cluster-1,int(feature['GBFeature_intervals'][0]['GBInterval_to'])-begin_cluster,strand=1),type=feature['GBFeature_key'], qualifiers=formatted_feature)

            genbank_seq_record.features+=[seq_feature]
        else:
            feature['GBFeature_location']="complement("+str(int(feature['GBFeature_intervals'][0]['GBInterval_from'])-begin_cluster)+".."+str(int(feature['GBFeature_intervals'][0]['GBInterval_to'])-begin_cluster)+")"
            seq_feature= SeqFeature(FeatureLocation(int(feature['GBFeature_intervals'][0]['GBInterval_to'])-begin_cluster,int(feature['GBFeature_intervals'][0]['GBInterval_from'])-begin_cluster,strand=-1),type=feature['GBFeature_key'], qualifiers=formatted_feature)

            genbank_seq_record.features+=[seq_feature]

    convert_to_fasta(genbank_seq_record)
    return(genbank_seq_record)
print (input_data)
for index, row in input_data.iterrows():
 try:
    NCBI_accession=row["NCBI accession"]
    begin_cluster=row["From"]
    end_cluster=row["To"]
    BGC_type=row["BGC type"]
    if allow_hybrids=="False":
        if "hybrid" in BGC_type:
            continue
    genome_record=fetch_DNA(NCBI_accession)
    BGC_record=obtain_partial_Genbank(NCBI_accession,genome_record, begin_cluster, end_cluster)
    filename_genbank_file=output_folder+str(NCBI_accession)+"_"+str(begin_cluster)+"_"+str(end_cluster)+".gb"
    SeqIO.write(BGC_record, filename_genbank_file, 'gb')
 except: print("error")
